AWSTemplateFormatVersion: '2010-09-09'
Description: MU VPC with network resources managed by mu
Parameters:
  InstanceTenancy:
    Description: Instance tenancy to use for VPC
    Type: String
    AllowedValues:
    - default
    - dedicated
    Default: default
  SshAllow:
    Description: Subnet from which to allow SSH access.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  VpcCidrBlock:
    Description: Subnet block for VPC
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  ElbSubnetAZ1CidrBlock:
    Description: ELB Subnet block for AZ1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  ElbSubnetAZ2CidrBlock:
    Description: ELB Subnet block for AZ2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.1.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  ElbSubnetAZ3CidrBlock:
    Description: ELB Subnet block for AZ3
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.2.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  InstanceSubnetAZ1CidrBlock:
    Description: Instance Subnet block for AZ1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.100.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  InstanceSubnetAZ2CidrBlock:
    Description: Instance Subnet block for AZ2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.101.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  InstanceSubnetAZ3CidrBlock:
    Description: Instance Subnet block for AZ3
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.102.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  NatSubnetAZ1CidrBlock:
    Description: NAT Subnet block for AZ1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.200.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  ElbInternal:
    Description: Should ELB be internal?
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  BastionImageId:
    Description: Bastion AMI to launch
    Type: String
    Default: ''
  BastionInstanceType:
    Description: Bastion Instance Type to launch
    Type: String
    Default: 't2.micro'
  BastionKeyName:
    Description: SSH Key to add to bastion
    Type: String
    Default: ''
Conditions:
  HasElbSubnetAZ1:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref ElbSubnetAZ1CidrBlock
        - ''
  HasElbSubnetAZ2:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref ElbSubnetAZ2CidrBlock
        - ''
  HasElbSubnetAZ3:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref ElbSubnetAZ3CidrBlock
        - ''
  HasInstanceSubnetAZ1:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref InstanceSubnetAZ1CidrBlock
        - ''
  HasInstanceSubnetAZ2:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref InstanceSubnetAZ2CidrBlock
        - ''
  HasInstanceSubnetAZ3:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref InstanceSubnetAZ3CidrBlock
        - ''
  IsPublicElb:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref ElbInternal
        - 'true'
  HasBastion:
    "Fn::And":
      - "Fn::Not":
        - "Fn::Equals":
          - !Ref BastionImageId
          - ''
      - "Fn::Not":
        - "Fn::Equals":
          - !Ref BastionKeyName
          - ''
Resources:
  BastionHost:
    Type: AWS::EC2::Instance
    Condition: HasBastion
    Properties:
      ImageId: !Ref BastionImageId
      InstanceType: !Ref BastionInstanceType
      KeyName: !Ref BastionKeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet:
        - !Ref BastionSG
        SubnetId: !Ref NatSubnetAZ1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-bastion
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Condition: HasBastion
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Bastion Host Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SshAllow
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: !Ref VpcCidrBlock
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: !Ref InstanceTenancy
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Network
        Value: Public
      - Key: Name
        Value: !Sub ${AWS::StackName}
  VPCInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ### NAT Networking
  NatImage:
    DependsOn: VPCInternetGateway
    Type: AWS::EC2::Instance
    Properties:
      SourceDestCheck: false
      ImageId: ami-980554e7
      InstanceType: t2.micro
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-nat-image
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet:
          - Ref: NatSG
        SubnetId:
            Ref: NatSubnetAZ1

  NatSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Nat Instance Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SshAllow
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref SshAllow
      SecurityGroupEgress:
      - IpProtocol: 'tcp'
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: 'tcp'
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

  EipAZ1:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref NatImage
      Domain: vpc
  NatSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref NatSubnetAZ1CidrBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ""
      Tags:
      - Key: Network
        Value: Public
      - Key: Name
        Value: !Sub ${AWS::StackName}-nat-1
  NatRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Network
        Value: Public
      - Key: Name
        Value: !Sub ${AWS::StackName}-nat
  NatDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      InstanceId: !Ref NatImage
      RouteTableId: !Ref NatRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  NatSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref NatSubnetAZ1
      RouteTableId: !Ref NatRouteTable
  NatNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Network
        Value: Public
      - Key: Name
        Value: !Sub ${AWS::StackName}-nat
  NatInboundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NatNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  NatOutboundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NatNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  NatSubnetAZ1PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref NatSubnetAZ1
      NetworkAclId: !Ref NatNetworkAcl

  ### Instance Networking
  InstanceSubnetAZ1:
    Type: AWS::EC2::Subnet
    Condition: HasInstanceSubnetAZ1
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref InstanceSubnetAZ1CidrBlock
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ""
      Tags:
      - Key: Network
        Value: Private
      - Key: Name
        Value: !Sub ${AWS::StackName}-ec2-1
  InstanceSubnetAZ2:
    Type: AWS::EC2::Subnet
    Condition: HasInstanceSubnetAZ2
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref InstanceSubnetAZ2CidrBlock
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ""
      Tags:
      - Key: Network
        Value: Private
      - Key: Name
        Value: !Sub ${AWS::StackName}-ec2-2
  InstanceSubnetAZ3:
    Type: AWS::EC2::Subnet
    Condition: HasInstanceSubnetAZ3
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref InstanceSubnetAZ3CidrBlock
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: ""
      Tags:
      - Key: Network
        Value: Private
      - Key: Name
        Value: !Sub ${AWS::StackName}-ec2-3
  InstanceRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Network
        Value: Private
      - Key: Name
        Value: !Sub ${AWS::StackName}-ec2
  InstanceDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InstanceRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatImage
  InstanceSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasInstanceSubnetAZ1
    Properties:
      SubnetId: !Ref InstanceSubnetAZ1
      RouteTableId: !Ref InstanceRouteTable
  InstanceSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasInstanceSubnetAZ2
    Properties:
      SubnetId: !Ref InstanceSubnetAZ2
      RouteTableId: !Ref InstanceRouteTable
  InstanceSubnetAZ3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasInstanceSubnetAZ3
    Properties:
      SubnetId: !Ref InstanceSubnetAZ3
      RouteTableId: !Ref InstanceRouteTable
  InstanceNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Network
        Value: Private
      - Key: Name
        Value: !Sub ${AWS::StackName}-ec2
  InstanceOutboundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref InstanceNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InstanceOutboundUdpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref InstanceNetworkAcl
      RuleNumber: '101'
      Protocol: '17'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InstanceInboundEphemeralPortNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref InstanceNetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  InstanceInboundEphemeralUdpPortNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref InstanceNetworkAcl
      RuleNumber: '102'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  InstanceInboundSSHPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref InstanceNetworkAcl
      RuleNumber: '104'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref NatSubnetAZ1CidrBlock
      PortRange:
        From: '22'
        To: '22'
  InstanceInboundPriviledgedPortNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref InstanceNetworkAcl
      RuleNumber: '105'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: '0'
        To: '65535'
  InstanceInboundPriviledgedUdpPortNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref InstanceNetworkAcl
      RuleNumber: '106'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: '0'
        To: '65535'
  InstanceSubnetAZ1PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: HasInstanceSubnetAZ1
    Properties:
      SubnetId: !Ref InstanceSubnetAZ1
      NetworkAclId: !Ref InstanceNetworkAcl
  InstanceSubnetAZ2PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: HasInstanceSubnetAZ2
    Properties:
      SubnetId: !Ref InstanceSubnetAZ2
      NetworkAclId: !Ref InstanceNetworkAcl
  InstanceSubnetAZ3PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: HasInstanceSubnetAZ3
    Properties:
      SubnetId: !Ref InstanceSubnetAZ3
      NetworkAclId: !Ref InstanceNetworkAcl

  ### ELB Networking
  ElbSubnetAZ1:
    Type: AWS::EC2::Subnet
    Condition: HasElbSubnetAZ1
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ElbSubnetAZ1CidrBlock
      MapPublicIpOnLaunch: !If [ IsPublicElb, true, false ]
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ""
      Tags:
      - Key: Network
        Value: !If [ IsPublicElb, "Public", "Private" ]
      - Key: Name
        Value: !Sub ${AWS::StackName}-elb-1
  ElbSubnetAZ2:
    Type: AWS::EC2::Subnet
    Condition: HasElbSubnetAZ2
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ElbSubnetAZ2CidrBlock
      MapPublicIpOnLaunch: !If [ IsPublicElb, true, false ]
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ""
      Tags:
      - Key: Network
        Value: !If [ IsPublicElb, "Public", "Private" ]
      - Key: Name
        Value: !Sub ${AWS::StackName}-elb-2
  ElbSubnetAZ3:
    Type: AWS::EC2::Subnet
    Condition: HasElbSubnetAZ3
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ElbSubnetAZ3CidrBlock
      MapPublicIpOnLaunch: !If [ IsPublicElb, true, false ]
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: ""
      Tags:
      - Key: Network
        Value: !If [ IsPublicElb, "Public", "Private" ]
      - Key: Name
        Value: !Sub ${AWS::StackName}-elb-3
  ElbRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Network
        Value: !If [ IsPublicElb, "Public", "Private" ]
      - Key: Name
        Value: !Sub ${AWS::StackName}-elb
  ElbDefaultRoute:
    Type: AWS::EC2::Route
    Condition: IsPublicElb
    DependsOn: VPCInternetGateway
    Properties:
      RouteTableId: !Ref ElbRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  ElbSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasElbSubnetAZ1
    Properties:
      SubnetId: !Ref ElbSubnetAZ1
      RouteTableId: !Ref ElbRouteTable
  ElbSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasElbSubnetAZ2
    Properties:
      SubnetId: !Ref ElbSubnetAZ2
      RouteTableId: !Ref ElbRouteTable
  ElbSubnetAZ3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasElbSubnetAZ3
    Properties:
      SubnetId: !Ref ElbSubnetAZ3
      RouteTableId: !Ref ElbRouteTable
  ElbNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Network
        Value: !If [ IsPublicElb, "Public", "Private" ]
      - Key: Name
        Value: !Sub ${AWS::StackName}-elb
  ElbInboundInternalNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ElbNetworkAcl
      RuleNumber: '104'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: '0'
        To: '65535'
  ElbInboundHttpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ElbNetworkAcl
      RuleNumber: '105'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  ElbInboundHttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ElbNetworkAcl
      RuleNumber: '106'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  ElbOutboundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ElbNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  ElbSubnetAZ1PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: HasElbSubnetAZ1
    Properties:
      SubnetId: !Ref ElbSubnetAZ1
      NetworkAclId: !Ref ElbNetworkAcl
  ElbSubnetAZ2PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: HasElbSubnetAZ2
    Properties:
      SubnetId: !Ref ElbSubnetAZ2
      NetworkAclId: !Ref ElbNetworkAcl
  ElbSubnetAZ3PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: HasElbSubnetAZ3
    Properties:
      SubnetId: !Ref ElbSubnetAZ3
      NetworkAclId: !Ref ElbNetworkAcl

Outputs:
  VpcId:
    Description: The id of the vpc
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VpcId
  BastionHost:
    Description: IP of the bastion host
    Value: !GetAtt BastionHost.PublicIp
    Condition: HasBastion
  ElbSubnetIds:
    Description: The elb subnetids
    Value:
      Fn::Join:
        - ','
        -
          - Fn::If:
            - HasElbSubnetAZ1
            - !Ref ElbSubnetAZ1
            - !Ref AWS::NoValue
          - Fn::If:
            - HasElbSubnetAZ2
            - !Ref ElbSubnetAZ2
            - !Ref AWS::NoValue
          - Fn::If:
            - HasElbSubnetAZ3
            - !Ref ElbSubnetAZ3
            - !Ref AWS::NoValue
    Export:
      Name: !Sub ${AWS::StackName}-ElbSubnetIds
  InstanceSubnetIds:
    Description: The ec2 subnetids
    Value:
      Fn::Join:
        - ','
        -
          - Fn::If:
            - HasInstanceSubnetAZ1
            - !Ref InstanceSubnetAZ1
            - !Ref AWS::NoValue
          - Fn::If:
            - HasInstanceSubnetAZ2
            - !Ref InstanceSubnetAZ2
            - !Ref AWS::NoValue
          - Fn::If:
            - HasInstanceSubnetAZ3
            - !Ref InstanceSubnetAZ3
            - !Ref AWS::NoValue
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSubnetIds